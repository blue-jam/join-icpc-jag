{"version":3,"sources":["components/Form/TextInput.tsx","components/JagForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","value","id","placeholder","setValue","type","onChange","e","target","JagForm","useState","name","setName","organization","setOrganization","handleName","setHandleName","icpcYear","setIcpcYear","icpcSchool","setIcpcSchool","icpcTeam","setIcpcTeam","problem","staff","affair","wishList","setWishList","emailBody","setEmailBody","htmlFor","checked","Object","assign","onClick","preventDefault","newEmailBody","values","every","flag","window","alert","readOnly","cols","rows","disabled","emailBodyForm","document","querySelector","select","execCommand","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aa01d6b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  value: string;\n  id: string;\n  placeholder?: string;\n  setValue: (value: string) => void;\n}\n\nconst TextInput: React.FunctionComponent<Props> = ({\n  value,\n  id,\n  placeholder,\n  setValue\n}) => {\n  return (\n    <input\n      type=\"text\"\n      id={id}\n      value={value}\n      placeholder={placeholder}\n      onChange={e => setValue(e.target.value)}\n    />\n  );\n};\n\nexport default TextInput;\n","import React, { useState } from 'react';\nimport TextInput from './Form/TextInput';\n\nconst JagForm: React.FunctionComponent = () => {\n  const [name, setName] = useState('');\n  const [organization, setOrganization] = useState('');\n  const [handleName, setHandleName] = useState('');\n  const [icpcYear, setIcpcYear] = useState('');\n  const [icpcSchool, setIcpcSchool] = useState('');\n  const [icpcTeam, setIcpcTeam] = useState('');\n  const [wishList, setWishList] = useState({\n    problem: false,\n    staff: false,\n    affair: false\n  });\n  const [emailBody, setEmailBody] = useState('');\n\n  const handleButtonClick = (e: any) => {\n    e.preventDefault();\n\n    if (!name) {\n      window.alert('氏名は必須です');\n      return;\n    }\n    if (!organization) {\n      window.alert('所属は必須です');\n      return;\n    }\n\n    let newEmailBody = 'こんにちは\\n\\n';\n    newEmailBody += `${organization}の${name}です。ICPC OBOGの会への入会を希望します。\\n`;\n    newEmailBody += `必要情報は下記のとおりです。\\n\\n`;\n    newEmailBody += `氏名: ${name}\\n`;\n    if (handleName) {\n      newEmailBody += `ハンドルネーム: ${handleName}\\n`;\n    }\n    if (icpcYear || icpcSchool || icpcTeam) {\n      newEmailBody += `ICPC経験: `;\n      if (icpcYear) {\n        newEmailBody += icpcYear && `${icpcYear}年に`;\n        newEmailBody += icpcSchool && `${icpcSchool}の`;\n        newEmailBody += icpcTeam && `${icpcTeam}という`;\n        if (icpcSchool || icpcTeam) {\n          newEmailBody += 'チームで';\n        }\n        newEmailBody += '参加しました。\\n';\n      }\n    }\n    newEmailBody += `JAGで担当したいこと:\\n`;\n    if (wishList.problem) {\n      newEmailBody += ` - 問題作成\\n`;\n    }\n    if (wishList.staff) {\n      newEmailBody += ` - 合宿・大会の現地スタッフ\\n`;\n    }\n    if (wishList.affair) {\n      newEmailBody += ` - 事務仕事\\n`;\n    }\n    if (Object.values(wishList).every(flag => !flag)) {\n      newEmailBody += ` - メーリングリストの受信のみ\\n`;\n    }\n\n    newEmailBody += `\\n以上です。よろしくお願いします。\\n\\n`;\n    newEmailBody += `${name}`;\n\n    setEmailBody(newEmailBody);\n  };\n\n  return (\n    <div>\n      <form>\n        <div>\n          <label htmlFor=\"name\">氏名（本名）</label>\n          <TextInput id=\"name\" value={name} setValue={setName} />\n        </div>\n        <div>\n          <label htmlFor=\"organization\">所属</label>\n          <TextInput\n            id=\"organization\"\n            value={organization}\n            setValue={setOrganization}\n            placeholder=\"学校名または企業名\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"handle\">ハンドルネーム</label>\n          <TextInput id=\"handle\" value={handleName} setValue={setHandleName} />\n        </div>\n        <div>\n          <div>\n            <label htmlFor=\"icpc-year\">ICPCに参加した年</label>\n            <TextInput id=\"icpc-year\" value={icpcYear} setValue={setIcpcYear} />\n          </div>\n          <div>\n            <label htmlFor=\"icpc-school\">ICPC参加時の所属</label>\n            <TextInput\n              id=\"icpc-school\"\n              value={icpcSchool}\n              setValue={setIcpcSchool}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"icpc-team\">チーム名</label>\n            <TextInput id=\"icpc-team\" value={icpcTeam} setValue={setIcpcTeam} />\n          </div>\n        </div>\n        <fieldset>\n          <legend>JAGに入ってやりたいこと</legend>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.problem}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    problem: e.target.checked\n                  })\n                );\n              }}\n            />\n            問題作成（原案、問題文作成・校正、データセット作成、テスターなど）\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.staff}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    staff: e.target.checked\n                  })\n                );\n              }}\n            />\n            現地スタッフ（夏合宿やICPCアジア地区予選）\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.affair}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    affair: e.target.checked\n                  })\n                );\n              }}\n            />\n            事務\n          </label>\n        </fieldset>\n        <button onClick={handleButtonClick}>加入メールを生成</button>\n      </form>\n      <hr />\n      <h2>生成結果</h2>\n      <div>\n        <div>\n          <textarea\n            id=\"email-body\"\n            value={emailBody}\n            readOnly={true}\n            cols={100}\n            rows={18}\n          />\n        </div>\n        <div>\n          <button\n            disabled={!emailBody}\n            onClick={e => {\n              e.preventDefault();\n\n              const emailBodyForm = document.querySelector<HTMLInputElement>(\n                '#email-body'\n              );\n              if (emailBodyForm) {\n                emailBodyForm.select();\n                document.execCommand('copy');\n                window.alert('コピーしました');\n              }\n            }}\n          >\n            コピー\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JagForm;\n","import React from 'react';\nimport JagForm from './components/JagForm';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>JAG加入メールジェネレーター</h1>\n      <JagForm />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}