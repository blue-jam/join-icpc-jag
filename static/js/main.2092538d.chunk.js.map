{"version":3,"sources":["components/Form/TextInput.tsx","components/JagForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","value","id","placeholder","setValue","type","onChange","e","target","generateEmailBody","organization","name","handleName","icpcYear","icpcSchool","icpcTeam","wishList","error","emailBody","emailSubject","emailTitle","problem","staff","affair","Object","values","every","flag","JagForm","useState","setName","setOrganization","setHandleName","setIcpcYear","setIcpcSchool","setIcpcTeam","setWishList","receiverEmail","setReceiverEmail","setEmailBody","src","alt","htmlFor","checked","assign","onClick","preventDefault","window","alert","location","href","encodeURI","readOnly","cols","rows","disabled","emailBodyForm","document","querySelector","select","execCommand","App","className","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2092538d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  value: string;\n  id: string;\n  placeholder?: string;\n  setValue: (value: string) => void;\n}\n\nconst TextInput: React.FunctionComponent<Props> = ({\n  value,\n  id,\n  placeholder,\n  setValue\n}) => {\n  return (\n    <input\n      type=\"text\"\n      id={id}\n      value={value}\n      placeholder={placeholder}\n      onChange={e => setValue(e.target.value)}\n    />\n  );\n};\n\nexport default TextInput;\n","import React, { MouseEvent, useState } from 'react';\nimport TextInput from './Form/TextInput';\n\ninterface WishList {\n  problem: boolean;\n  staff: boolean;\n  affair: boolean;\n}\n\ninterface EmailGenerateResult {\n  error?: string;\n  emailSubject: string;\n  emailBody: string;\n}\n\nconst generateEmailBody = (\n  organization: string,\n  name: string,\n  handleName: string,\n  icpcYear: string,\n  icpcSchool: string,\n  icpcTeam: string,\n  wishList: WishList\n): EmailGenerateResult => {\n  if (!name) {\n    return { error: '氏名は必須です', emailBody: '', emailSubject: '' };\n  }\n\n  if (!organization) {\n    return { error: '所属は必須です', emailBody: '', emailSubject: '' };\n  }\n\n  const emailTitle = `ICPC OB OGの会入会希望　（${name}）`;\n\n  let emailBody = 'こんにちは\\n\\n';\n  emailBody += `${organization}の${name}です。ICPC OBOGの会への入会を希望します。\\n`;\n  emailBody += `必要情報は下記のとおりです。\\n\\n`;\n  emailBody += `氏名: ${name}\\n`;\n  if (handleName) {\n    emailBody += `ハンドルネーム: ${handleName}\\n`;\n  }\n  if (icpcYear || icpcSchool || icpcTeam) {\n    emailBody += `ICPC経験: `;\n    if (icpcYear) {\n      emailBody += icpcYear && `${icpcYear}年に`;\n      emailBody += icpcSchool && `${icpcSchool}の`;\n      emailBody += icpcTeam && `${icpcTeam}という`;\n      if (icpcSchool || icpcTeam) {\n        emailBody += 'チームで';\n      }\n      emailBody += '参加しました。\\n';\n    }\n  }\n  emailBody += `JAGで担当したいこと:\\n`;\n  if (wishList.problem) {\n    emailBody += ` - 問題作成\\n`;\n  }\n  if (wishList.staff) {\n    emailBody += ` - 合宿・大会の現地スタッフ\\n`;\n  }\n  if (wishList.affair) {\n    emailBody += ` - 事務仕事\\n`;\n  }\n  if (Object.values(wishList).every(flag => !flag)) {\n    emailBody += ` - メーリングリストの受信のみ\\n`;\n  }\n\n  emailBody += `\\n以上です。よろしくお願いします。\\n\\n`;\n  emailBody += `${name}`;\n\n  return { emailBody, emailSubject: emailTitle };\n};\n\nconst JagForm: React.FunctionComponent = () => {\n  const [name, setName] = useState('');\n  const [organization, setOrganization] = useState('');\n  const [handleName, setHandleName] = useState('');\n  const [icpcYear, setIcpcYear] = useState('');\n  const [icpcSchool, setIcpcSchool] = useState('');\n  const [icpcTeam, setIcpcTeam] = useState('');\n  const [wishList, setWishList] = useState({\n    problem: false,\n    staff: false,\n    affair: false\n  });\n  const [receiverEmail, setReceiverEmail] = useState('');\n  const [emailBody, setEmailBody] = useState('');\n\n  const handleGenerateButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    const { error, emailBody } = generateEmailBody(\n      organization,\n      name,\n      handleName,\n      icpcYear,\n      icpcSchool,\n      icpcTeam,\n      wishList\n    );\n\n    if (error) {\n      window.alert(error);\n      return;\n    }\n\n    setEmailBody(emailBody);\n  };\n\n  const handleSubmitButtonClick = (e: MouseEvent) => {\n    e.preventDefault();\n\n    const { error, emailBody, emailSubject } = generateEmailBody(\n      organization,\n      name,\n      handleName,\n      icpcYear,\n      icpcSchool,\n      icpcTeam,\n      wishList\n    );\n\n    if (error) {\n      window.alert(error);\n      return;\n    }\n\n    setEmailBody(emailBody);\n\n    window.location.href = `mailto:${receiverEmail}?subject=${encodeURI(\n      emailSubject\n    )}&body=${encodeURI(emailBody)}`;\n  };\n\n  return (\n    <div>\n      <form>\n        <div>\n          <img\n            src=\"https://jag-icpc.org/?plugin=attach&refer=FrontPage&openfile=question.png\"\n            alt=\"\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"receiver-email\">送信先メールアドレス</label>\n          <TextInput\n            id=\"receiver-email\"\n            value={receiverEmail}\n            setValue={setReceiverEmail}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"name\">氏名（本名）</label>\n          <TextInput id=\"name\" value={name} setValue={setName} />\n        </div>\n        <div>\n          <label htmlFor=\"organization\">所属</label>\n          <TextInput\n            id=\"organization\"\n            value={organization}\n            setValue={setOrganization}\n            placeholder=\"学校名または企業名\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"handle\">ハンドルネーム</label>\n          <TextInput id=\"handle\" value={handleName} setValue={setHandleName} />\n        </div>\n        <div>\n          <div>\n            <label htmlFor=\"icpc-year\">ICPCに参加した年</label>\n            <TextInput id=\"icpc-year\" value={icpcYear} setValue={setIcpcYear} />\n          </div>\n          <div>\n            <label htmlFor=\"icpc-school\">ICPC参加時の所属</label>\n            <TextInput\n              id=\"icpc-school\"\n              value={icpcSchool}\n              setValue={setIcpcSchool}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"icpc-team\">チーム名</label>\n            <TextInput id=\"icpc-team\" value={icpcTeam} setValue={setIcpcTeam} />\n          </div>\n        </div>\n        <fieldset>\n          <legend>JAGに入ってやりたいこと</legend>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.problem}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    problem: e.target.checked\n                  })\n                );\n              }}\n            />\n            問題作成（原案、問題文作成・校正、データセット作成、テスターなど）\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.staff}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    staff: e.target.checked\n                  })\n                );\n              }}\n            />\n            現地スタッフ（夏合宿やICPCアジア地区予選）\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              checked={wishList.affair}\n              onChange={e => {\n                setWishList(\n                  Object.assign({}, wishList, {\n                    affair: e.target.checked\n                  })\n                );\n              }}\n            />\n            事務\n          </label>\n        </fieldset>\n        <button onClick={handleGenerateButtonClick}>加入メールを生成</button>\n        <button onClick={handleSubmitButtonClick}>メーラーを起動する</button>\n        <div>\n          OSとブラウザ、メーラーの組み合わせによって、起動したときに文字化けをすることがあります。\n          文字化けが起こる場合は、生成結果をコピーしてメーラーに貼り付けてください。\n        </div>\n      </form>\n      <hr />\n      <h2>生成結果</h2>\n      <div>\n        <div>\n          <textarea\n            id=\"email-body\"\n            value={emailBody}\n            readOnly={true}\n            cols={100}\n            rows={18}\n          />\n        </div>\n        <div>\n          <button\n            disabled={!emailBody}\n            onClick={e => {\n              e.preventDefault();\n\n              const emailBodyForm = document.querySelector<HTMLInputElement>(\n                '#email-body'\n              );\n              if (emailBodyForm) {\n                emailBodyForm.select();\n                document.execCommand('copy');\n                window.alert('コピーしました');\n              }\n            }}\n          >\n            コピー\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default JagForm;\n","import React from 'react';\nimport JagForm from './components/JagForm';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>JAG加入メールジェネレーター</h1>\n      <JagForm />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}